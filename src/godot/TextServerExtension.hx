/**
	Generated using Godot Bindings Generator for Haxe.
	https://github.com/SomeRanDev/Haxe-GodotBindingsGenerator
**/
package godot;
/**
	External [TextServer] implementations should inherit from this class.
**/
@:generated_godot_api @:bindings_api_type("class") @:is_refcounted(true) @:is_instantiable(true) @:api_type("core") @:is_resource(true) @:is_node(false) extern class TextServerExtension extends godot.TextServer {
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _has_feature(feature:godot.TextServer_Feature):Bool;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _get_name():String;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _get_features():Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _free_rid(rid:godot.RID):Void;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _has(rid:godot.RID):Bool;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _load_support_data(filename:String):Bool;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _get_support_data_filename():String;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _get_support_data_info():String;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _save_support_data(filename:String):Bool;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _is_locale_right_to_left(locale:String):Bool;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _name_to_tag(name:String):Int;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(0, ":meta"("int64"))
	public function _tag_to_name(@:meta("int64") tag:Int):String;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _create_font():godot.RID;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _create_font_linked_variation(font_rid:godot.RID):godot.RID;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_data(font_rid:godot.RID, data:godot.PackedByteArray):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_set_face_index(font_rid:godot.RID, @:meta("int64") face_index:Int):Void;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_face_index(font_rid:godot.RID):Int;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_face_count(font_rid:godot.RID):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_style(font_rid:godot.RID, style:godot.TextServer_FontStyle):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_style(font_rid:godot.RID):godot.TextServer_FontStyle;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_name(font_rid:godot.RID, name:String):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_name(font_rid:godot.RID):String;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_ot_name_strings(font_rid:godot.RID):godot.Dictionary;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_style_name(font_rid:godot.RID, name_style:String):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_style_name(font_rid:godot.RID):String;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_set_weight(font_rid:godot.RID, @:meta("int64") weight:Int):Void;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_weight(font_rid:godot.RID):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_set_stretch(font_rid:godot.RID, @:meta("int64") stretch:Int):Void;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_stretch(font_rid:godot.RID):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_antialiasing(font_rid:godot.RID, antialiasing:godot.TextServer_FontAntialiasing):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_antialiasing(font_rid:godot.RID):godot.TextServer_FontAntialiasing;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_generate_mipmaps(font_rid:godot.RID, generate_mipmaps:Bool):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_generate_mipmaps(font_rid:godot.RID):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_multichannel_signed_distance_field(font_rid:godot.RID, msdf:Bool):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_is_multichannel_signed_distance_field(font_rid:godot.RID):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_set_msdf_pixel_range(font_rid:godot.RID, @:meta("int64") msdf_pixel_range:Int):Void;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_msdf_pixel_range(font_rid:godot.RID):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_set_msdf_size(font_rid:godot.RID, @:meta("int64") msdf_size:Int):Void;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_msdf_size(font_rid:godot.RID):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_set_fixed_size(font_rid:godot.RID, @:meta("int64") fixed_size:Int):Void;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_fixed_size(font_rid:godot.RID):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_fixed_size_scale_mode(font_rid:godot.RID, fixed_size_scale_mode:godot.TextServer_FixedSizeScaleMode):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_fixed_size_scale_mode(font_rid:godot.RID):godot.TextServer_FixedSizeScaleMode;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_allow_system_fallback(font_rid:godot.RID, allow_system_fallback:Bool):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_is_allow_system_fallback(font_rid:godot.RID):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_force_autohinter(font_rid:godot.RID, force_autohinter:Bool):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_is_force_autohinter(font_rid:godot.RID):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_hinting(font_rid:godot.RID, hinting:godot.TextServer_Hinting):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_hinting(font_rid:godot.RID):godot.TextServer_Hinting;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_subpixel_positioning(font_rid:godot.RID, subpixel_positioning:godot.TextServer_SubpixelPositioning):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_subpixel_positioning(font_rid:godot.RID):godot.TextServer_SubpixelPositioning;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("double"))
	public function _font_set_embolden(font_rid:godot.RID, @:meta("double") strength:Float):Void;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_embolden(font_rid:godot.RID):Float;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_set_spacing(font_rid:godot.RID, spacing:godot.TextServer_SpacingType, @:meta("int64") value:Int):Void;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_spacing(font_rid:godot.RID, spacing:godot.TextServer_SpacingType):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_transform(font_rid:godot.RID, transform:godot.Transform2D):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_transform(font_rid:godot.RID):godot.Transform2D;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_variation_coordinates(font_rid:godot.RID, variation_coordinates:godot.Dictionary):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_variation_coordinates(font_rid:godot.RID):godot.Dictionary;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("double"))
	public function _font_set_oversampling(font_rid:godot.RID, @:meta("double") oversampling:Float):Void;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_oversampling(font_rid:godot.RID):Float;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_size_cache_list(font_rid:godot.RID):Array<godot.Vector2i>;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_clear_size_cache(font_rid:godot.RID):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_remove_size_cache(font_rid:godot.RID, size:godot.Vector2i):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("double"))
	public function _font_set_ascent(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("double") ascent:Float):Void;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_get_ascent(font_rid:godot.RID, @:meta("int64") size:Int):Float;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("double"))
	public function _font_set_descent(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("double") descent:Float):Void;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_get_descent(font_rid:godot.RID, @:meta("int64") size:Int):Float;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("double"))
	public function _font_set_underline_position(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("double") underline_position:Float):Void;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_get_underline_position(font_rid:godot.RID, @:meta("int64") size:Int):Float;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("double"))
	public function _font_set_underline_thickness(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("double") underline_thickness:Float):Void;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_get_underline_thickness(font_rid:godot.RID, @:meta("int64") size:Int):Float;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("double"))
	public function _font_set_scale(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("double") scale:Float):Void;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_get_scale(font_rid:godot.RID, @:meta("int64") size:Int):Float;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_texture_count(font_rid:godot.RID, size:godot.Vector2i):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_clear_textures(font_rid:godot.RID, size:godot.Vector2i):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_remove_texture(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") texture_index:Int):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_set_texture_image(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") texture_index:Int, image:godot.Image):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_texture_image(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") texture_index:Int):godot.Image;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_set_texture_offsets(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") texture_index:Int, offset:godot.PackedInt32Array):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_texture_offsets(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") texture_index:Int):godot.PackedInt32Array;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_glyph_list(font_rid:godot.RID, size:godot.Vector2i):godot.PackedInt32Array;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_clear_glyphs(font_rid:godot.RID, size:godot.Vector2i):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_remove_glyph(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_glyph_advance(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("int64") glyph:Int):godot.Vector2;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("int64"))
	public function _font_set_glyph_advance(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("int64") glyph:Int, advance:godot.Vector2):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_glyph_offset(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int):godot.Vector2;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_set_glyph_offset(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int, offset:godot.Vector2):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_glyph_size(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int):godot.Vector2;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_set_glyph_size(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int, gl_size:godot.Vector2):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_glyph_uv_rect(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int):godot.Rect2;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_set_glyph_uv_rect(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int, uv_rect:godot.Rect2):Void;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_glyph_texture_idx(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	@:argMeta(3, ":meta"("int64"))
	public function _font_set_glyph_texture_idx(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int, @:meta("int64") texture_idx:Int):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_glyph_texture_rid(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int):godot.RID;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_glyph_texture_size(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") glyph:Int):godot.Vector2;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_glyph_contours(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("int64") index:Int):godot.Dictionary;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_get_kerning_list(font_rid:godot.RID, @:meta("int64") size:Int):Array<godot.Vector2i>;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_clear_kerning_map(font_rid:godot.RID, @:meta("int64") size:Int):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_remove_kerning(font_rid:godot.RID, @:meta("int64") size:Int, glyph_pair:godot.Vector2i):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_set_kerning(font_rid:godot.RID, @:meta("int64") size:Int, glyph_pair:godot.Vector2i, kerning:godot.Vector2):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_get_kerning(font_rid:godot.RID, @:meta("int64") size:Int, glyph_pair:godot.Vector2i):godot.Vector2;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("int64"))
	@:argMeta(3, ":meta"("int64"))
	public function _font_get_glyph_index(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("int64") char:Int, @:meta("int64") variation_selector:Int):Int;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("int64"))
	public function _font_get_char_from_glyph_index(font_rid:godot.RID, @:meta("int64") size:Int, @:meta("int64") glyph_index:Int):Int;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _font_has_char(font_rid:godot.RID, @:meta("int64") char:Int):Bool;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_supported_chars(font_rid:godot.RID):String;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	@:argMeta(3, ":meta"("int64"))
	public function _font_render_range(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") start:Int, @:meta("int64") end:Int):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _font_render_glyph(font_rid:godot.RID, size:godot.Vector2i, @:meta("int64") index:Int):Void;
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	@:argMeta(4, ":meta"("int64"))
	public function _font_draw_glyph(font_rid:godot.RID, canvas:godot.RID, @:meta("int64") size:Int, pos:godot.Vector2, @:meta("int64") index:Int, color:godot.Color):Void;
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	@:argMeta(3, ":meta"("int64"))
	@:argMeta(5, ":meta"("int64"))
	public function _font_draw_glyph_outline(font_rid:godot.RID, canvas:godot.RID, @:meta("int64") size:Int, @:meta("int64") outline_size:Int, pos:godot.Vector2, @:meta("int64") index:Int, color:godot.Color):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_is_language_supported(font_rid:godot.RID, language:String):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_language_support_override(font_rid:godot.RID, language:String, supported:Bool):Void;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_language_support_override(font_rid:godot.RID, language:String):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_remove_language_support_override(font_rid:godot.RID, language:String):Void;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_language_support_overrides(font_rid:godot.RID):godot.PackedStringArray;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_is_script_supported(font_rid:godot.RID, script:String):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_script_support_override(font_rid:godot.RID, script:String, supported:Bool):Void;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_script_support_override(font_rid:godot.RID, script:String):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_remove_script_support_override(font_rid:godot.RID, script:String):Void;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_script_support_overrides(font_rid:godot.RID):godot.PackedStringArray;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_set_opentype_feature_overrides(font_rid:godot.RID, overrides:godot.Dictionary):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_opentype_feature_overrides(font_rid:godot.RID):godot.Dictionary;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_supported_feature_list(font_rid:godot.RID):godot.Dictionary;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_supported_variation_list(font_rid:godot.RID):godot.Dictionary;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _font_get_global_oversampling():Float;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(0, ":meta"("double"))
	public function _font_set_global_oversampling(@:meta("double") oversampling:Float):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(0, ":meta"("int64"))
	@:argMeta(1, ":meta"("int64"))
	public function _get_hex_code_box_size(@:meta("int64") size:Int, @:meta("int64") index:Int):godot.Vector2;
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(3, ":meta"("int64"))
	public function _draw_hex_code_box(canvas:godot.RID, @:meta("int64") size:Int, pos:godot.Vector2, @:meta("int64") index:Int, color:godot.Color):Void;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _create_shaped_text(direction:godot.TextServer_Direction, orientation:godot.TextServer_Orientation):godot.RID;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_clear(shaped:godot.RID):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_set_direction(shaped:godot.RID, direction:godot.TextServer_Direction):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_direction(shaped:godot.RID):godot.TextServer_Direction;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_inferred_direction(shaped:godot.RID):godot.TextServer_Direction;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_set_bidi_override(shaped:godot.RID, _override:godot.GodotArray):Void;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_set_custom_punctuation(shaped:godot.RID, punct:String):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_custom_punctuation(shaped:godot.RID):String;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_set_orientation(shaped:godot.RID, orientation:godot.TextServer_Orientation):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_orientation(shaped:godot.RID):godot.TextServer_Orientation;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_set_preserve_invalid(shaped:godot.RID, enabled:Bool):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_preserve_invalid(shaped:godot.RID):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_set_preserve_control(shaped:godot.RID, enabled:Bool):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_preserve_control(shaped:godot.RID):Bool;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _shaped_text_set_spacing(shaped:godot.RID, spacing:godot.TextServer_SpacingType, @:meta("int64") value:Int):Void;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_spacing(shaped:godot.RID, spacing:godot.TextServer_SpacingType):Int;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(3, ":meta"("int64"))
	public function _shaped_text_add_string(shaped:godot.RID, text:String, fonts:Array<godot.RID>, @:meta("int64") size:Int, opentype_features:godot.Dictionary, language:String, meta:Dynamic):Bool;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(4, ":meta"("int64"))
	@:argMeta(5, ":meta"("double"))
	public function _shaped_text_add_object(shaped:godot.RID, key:Dynamic, size:godot.Vector2, inline_align:godot.InlineAlignment, @:meta("int64") length:Int, @:meta("double") baseline:Float):Bool;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(4, ":meta"("double"))
	public function _shaped_text_resize_object(shaped:godot.RID, key:Dynamic, size:godot.Vector2, inline_align:godot.InlineAlignment, @:meta("double") baseline:Float):Bool;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_get_span_count(shaped:godot.RID):Int;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _shaped_get_span_meta(shaped:godot.RID, @:meta("int64") index:Int):Dynamic;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(3, ":meta"("int64"))
	public function _shaped_set_span_update_font(shaped:godot.RID, @:meta("int64") index:Int, fonts:Array<godot.RID>, @:meta("int64") size:Int, opentype_features:godot.Dictionary):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("int64"))
	public function _shaped_text_substr(shaped:godot.RID, @:meta("int64") start:Int, @:meta("int64") length:Int):godot.RID;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_parent(shaped:godot.RID):godot.RID;
	@:return_value_meta("double")
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("double"))
	public function _shaped_text_fit_to_width(shaped:godot.RID, @:meta("double") width:Float, justification_flags:godot.TextServer_JustificationFlag):Float;
	@:return_value_meta("double")
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_tab_align(shaped:godot.RID, tab_stops:godot.PackedFloat32Array):Float;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_shape(shaped:godot.RID):Bool;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_update_breaks(shaped:godot.RID):Bool;
	@:return_value_meta(null)
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_update_justification_ops(shaped:godot.RID):Bool;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_is_ready(shaped:godot.RID):Bool;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_glyph_count(shaped:godot.RID):Int;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_range(shaped:godot.RID):godot.Vector2i;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _shaped_text_get_line_breaks_adv(shaped:godot.RID, width:godot.PackedFloat32Array, @:meta("int64") start:Int, once:Bool, break_flags:godot.TextServer_LineBreakFlag):godot.PackedInt32Array;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("double"))
	@:argMeta(2, ":meta"("int64"))
	public function _shaped_text_get_line_breaks(shaped:godot.RID, @:meta("double") width:Float, @:meta("int64") start:Int, break_flags:godot.TextServer_LineBreakFlag):godot.PackedInt32Array;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_word_breaks(shaped:godot.RID, grapheme_flags:godot.TextServer_GraphemeFlag):godot.PackedInt32Array;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_trim_pos(shaped:godot.RID):Int;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_ellipsis_pos(shaped:godot.RID):Int;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_ellipsis_glyph_count(shaped:godot.RID):Int;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("double"))
	public function _shaped_text_overrun_trim_to_width(shaped:godot.RID, @:meta("double") width:Float, trim_flags:godot.TextServer_TextOverrunFlag):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_objects(shaped:godot.RID):godot.GodotArray;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_object_rect(shaped:godot.RID, key:Dynamic):godot.Rect2;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_size(shaped:godot.RID):godot.Vector2;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_ascent(shaped:godot.RID):Float;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_descent(shaped:godot.RID):Float;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_width(shaped:godot.RID):Float;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_underline_position(shaped:godot.RID):Float;
	@:return_value_meta("double")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_underline_thickness(shaped:godot.RID):Float;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("int64"))
	public function _shaped_text_get_dominant_direction_in_range(shaped:godot.RID, @:meta("int64") start:Int, @:meta("int64") end:Int):Int;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	@:argMeta(2, ":meta"("int64"))
	public function _shaped_text_get_selection(shaped:godot.RID, @:meta("int64") start:Int, @:meta("int64") end:Int):godot.PackedVector2Array;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("double"))
	public function _shaped_text_hit_test_grapheme(shaped:godot.RID, @:meta("double") coord:Float):Int;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("double"))
	public function _shaped_text_hit_test_position(shaped:godot.RID, @:meta("double") coord:Float):Int;
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(3, ":meta"("double"))
	@:argMeta(4, ":meta"("double"))
	public function _shaped_text_draw(shaped:godot.RID, canvas:godot.RID, pos:godot.Vector2, @:meta("double") clip_l:Float, @:meta("double") clip_r:Float, color:godot.Color):Void;
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(3, ":meta"("double"))
	@:argMeta(4, ":meta"("double"))
	@:argMeta(5, ":meta"("int64"))
	public function _shaped_text_draw_outline(shaped:godot.RID, canvas:godot.RID, pos:godot.Vector2, @:meta("double") clip_l:Float, @:meta("double") clip_r:Float, @:meta("int64") outline_size:Int, color:godot.Color):Void;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _shaped_text_get_grapheme_bounds(shaped:godot.RID, @:meta("int64") pos:Int):godot.Vector2;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _shaped_text_next_grapheme_pos(shaped:godot.RID, @:meta("int64") pos:Int):Int;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _shaped_text_prev_grapheme_pos(shaped:godot.RID, @:meta("int64") pos:Int):Int;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _shaped_text_get_character_breaks(shaped:godot.RID):godot.PackedInt32Array;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _shaped_text_next_character_pos(shaped:godot.RID, @:meta("int64") pos:Int):Int;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _shaped_text_prev_character_pos(shaped:godot.RID, @:meta("int64") pos:Int):Int;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(1, ":meta"("int64"))
	public function _shaped_text_closest_character_pos(shaped:godot.RID, @:meta("int64") pos:Int):Int;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _format_number(string:String, language:String):String;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _parse_number(string:String, language:String):String;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _percent_sign(language:String):String;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _strip_diacritics(string:String):String;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _is_valid_identifier(string:String):Bool;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	@:argMeta(2, ":meta"("int64"))
	public function _string_get_word_breaks(string:String, language:String, @:meta("int64") chars_per_line:Int):godot.PackedInt32Array;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _string_get_character_breaks(string:String, language:String):godot.PackedInt32Array;
	@:return_value_meta("int64")
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _is_confusable(string:String, dict:godot.PackedStringArray):Int;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _spoof_check(string:String):Bool;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _string_to_upper(string:String, language:String):String;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _string_to_lower(string:String, language:String):String;
	@:return_value_meta(null)
	@:is_const(true)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _parse_structured_text(parser_type:godot.TextServer_StructuredTextParser, args:godot.GodotArray, text:String):Array<godot.Vector3i>;
	@:is_const(false)
	@:is_static(false)
	@:is_vararg(false)
	@:is_virtual(true)
	@:hash(null)
	@:hash_compatibility(null)
	public function _cleanup():Void;
}